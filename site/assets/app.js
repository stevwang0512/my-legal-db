// Minimal client to fetch shard map, query shards, and render md
async function loadDocs(){
  const res = await fetch('../index/manifest.json');
  const m = await res.json();
  const ul = document.getElementById('doclist');
  ul.innerHTML = '';
  for(const doc of m.docs){
    const li = document.createElement('li');
    const a = document.createElement('a');
    a.href='#'; a.textContent = doc.title || doc.id;
    a.addEventListener('click', async (e)=>{
      e.preventDefault();
      const md = await fetch('../content/'+doc.path).then(r=>r.text());
      renderMarkdown(md);
    });
    li.appendChild(a); ul.appendChild(li);
  }
  window.__MANIFEST__ = m;
}
function renderMarkdown(md){
  // ultra simple: show as pre text; can plug a markdown renderer later
  document.getElementById('viewer').innerHTML = '<pre>'+md.replace(/[&<>]/g, s=>({ '&':'&amp;','<':'&lt;','>':'&gt;' }[s]))+'</pre>';
}
async function search(query){
  const res = await fetch('../index/route.json').then(r=>r.json());
  const shards = res.route(query);
  const hits = [];
  for(const s of shards){
    const data = await fetch('../index/'+s).then(r=>r.json());
    for(const h of data.search(query)){
      hits.push(h);
      if(hits.length>200) break;
    }
    if(hits.length>200) break;
  }
  const box = document.getElementById('results');
  box.innerHTML = '<h3>搜索结果</h3>';
  for(const h of hits){
    const div = document.createElement('div'); div.className='item';
    div.textContent = h.title+' —— '+h.snippet;
    div.addEventListener('click', async ()=>{
      const md = await fetch('../content/'+h.path).then(r=>r.text());
      renderMarkdown(md);
    });
    box.appendChild(div);
  }
}
document.getElementById('q').addEventListener('input', e=>{
  const q = e.target.value.trim();
  if(q.length===0){ document.getElementById('results').innerHTML=''; return; }
  // This is a placeholder. Real shard routing/search logic will be in JSON modules generated by build_index.py
  search(q);
});
loadDocs();
