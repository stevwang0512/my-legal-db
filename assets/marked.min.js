/*! mini-marked (subset) â€” exposes window.marked.parse(md) */
(function(){
  function escapeHtml(s){return s.replace(/[&<>"]/g,m=>({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;"}[m]));}
  function stripFrontMatter(md){
    const m = md.match(/^---[\s\S]*?---\n?/); return m ? md.slice(m[0].length) : md;
  }
  function parse(md){
    md = stripFrontMatter(md).replace(/\r\n?/g,"\n");
    // code fences
    let blocks=[], out="", i=0;
    const fence=/^```(\w+)?\n([\s\S]*?)\n```/gm;
    md = md.replace(fence,(_,lang,code)=>{
      const key="@@BLOCK"+(blocks.length)+"@@"; 
      blocks.push(`<pre><code>${escapeHtml(code)}</code></pre>`);
      return key;
    });
    // headings
    md = md.replace(/^(#{1,6})\s+(.+)$/gm,(m,hs,txt)=>{
      const lvl=hs.length;
      return `<h${lvl}>${inline(txt.trim())}</h${lvl}>`;
    });
    // lists (ul)
    md = md.replace(/^(?:\s*[-*]\s+.+\n)+/gm,(m)=>{
      const items=m.trim().split(/\n/).map(l=>{
        return `<li>${inline(l.replace(/^\s*[-*]\s+/,"").trim())}</li>`;
      }).join("");
      return `<ul>${items}</ul>`;
    });
    // paragraphs (blank-line separated)
    md = md.split(/\n{2,}/).map(chunk=>{
      if(/^<h\d|^<ul>|^@@BLOCK/.test(chunk)) return chunk;
      // single lines with hard breaks
      return "<p>"+chunk.split("\n").map(line=>{
        if(/^<h\d|^<ul>|^@@BLOCK/.test(line)) return line;
        return inline(line);
      }).join("<br/>")+"</p>";
    }).join("\n");
    // restore blocks
    md = md.replace(/@@BLOCK(\d+)@@/g,(_,n)=>blocks[+n]);
    return md;
  }
  function inline(s){
    if(!s) return "";
    // inline code
    s = s.replace(/`([^`]+)`/g,(m,code)=>"<code>"+escapeHtml(code)+"</code>");
    // bold **text**
    s = s.replace(/\*\*([^*]+)\*\*/g,"<strong>$1</strong>");
    // italic *text*
    s = s.replace(/(^|[^\*])\*([^*\n]+)\*/g,(m,p1,txt)=>p1+"<em>"+txt+"</em>");
    // links [text](url)
    s = s.replace(/\[([^\]]+)\]\(([^)]+)\)/g,(m,t,u)=>`<a href="${u}">${escapeHtml(t)}</a>`);
    return s;
  }
  window.marked = { parse };
})();
